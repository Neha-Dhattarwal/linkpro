import { User, ProfileLink, ClickLog } from '../types';

const STORAGE_KEYS = {
  USERS: 'linkpro_users', // Store all registered users
  CURRENT_USER: 'linkpro_current_user',
  TOKEN: 'linkpro_token',
  LINKS: 'linkpro_links',
  CLICKS: 'linkpro_clicks',
  THEME: 'linkpro_theme'
};

// User management
export const saveUser = (user: User): void => {
  localStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(user));
};

export const getUser = (): User | null => {
  const userData = localStorage.getItem(STORAGE_KEYS.CURRENT_USER);
  return userData ? JSON.parse(userData) : null;
};

export const saveToken = (token: string): void => {
  localStorage.setItem(STORAGE_KEYS.TOKEN, token);
};

export const getToken = (): string | null => {
  return localStorage.getItem(STORAGE_KEYS.TOKEN);
};

export const clearAuth = (): void => {
  localStorage.removeItem(STORAGE_KEYS.CURRENT_USER);
  localStorage.removeItem(STORAGE_KEYS.TOKEN);
};

// User registration and authentication
export const getAllUsers = (): User[] => {
  const usersData = localStorage.getItem(STORAGE_KEYS.USERS);
  return usersData ? JSON.parse(usersData) : [];
};

export const saveAllUsers = (users: User[]): void => {
  localStorage.setItem(STORAGE_KEYS.USERS, JSON.stringify(users));
};

export const registerUser = (userData: Omit<User, 'id' | 'createdAt'>): User => {
  const users = getAllUsers();
  
  // Check if user already exists
  const existingUser = users.find(user => user.email === userData.email);
  if (existingUser) {
    throw new Error('User with this email already exists');
  }

  // Check if username is taken
  const existingUsername = users.find(user => user.username === userData.username);
  if (existingUsername) {
    throw new Error('Username is already taken');
  }

  const newUser: User = {
    ...userData,
    id: generateId(),
    createdAt: new Date().toISOString()
  };

  users.push(newUser);
  saveAllUsers(users);
  
  return newUser;
};

export const authenticateUser = (email: string, password: string): User | null => {
  const users = getAllUsers();
  const user = users.find(u => u.email === email);
  
  if (!user) {
    return null; // User not found
  }

  // In a real app, you'd hash and compare passwords
  // For this demo, we'll store password in a separate object
  const passwords = getStoredPasswords();
  const storedPassword = passwords[user.id];
  
  if (storedPassword === password) {
    return user;
  }
  
  return null; // Invalid password
};

// Password storage (in real app, this would be hashed and stored securely)
const PASSWORD_STORAGE_KEY = 'linkpro_passwords';

export const savePassword = (userId: string, password: string): void => {
  const passwords = getStoredPasswords();
  passwords[userId] = password; // In real app, this would be hashed
  localStorage.setItem(PASSWORD_STORAGE_KEY, JSON.stringify(passwords));
};

export const getStoredPasswords = (): Record<string, string> => {
  const passwordsData = localStorage.getItem(PASSWORD_STORAGE_KEY);
  return passwordsData ? JSON.parse(passwordsData) : {};
};

// Links management
export const saveLinks = (links: ProfileLink[]): void => {
  localStorage.setItem(STORAGE_KEYS.LINKS, JSON.stringify(links));
};

export const getLinks = (): ProfileLink[] => {
  const linksData = localStorage.getItem(STORAGE_KEYS.LINKS);
  return linksData ? JSON.parse(linksData) : [];
};

// Click tracking
export const saveClickLog = (log: ClickLog): void => {
  const logs = getClickLogs();
  logs.push(log);
  localStorage.setItem(STORAGE_KEYS.CLICKS, JSON.stringify(logs));
};

export const getClickLogs = (): ClickLog[] => {
  const logsData = localStorage.getItem(STORAGE_KEYS.CLICKS);
  return logsData ? JSON.parse(logsData) : [];
};

// Theme management
export const saveTheme = (theme: 'light' | 'dark'): void => {
  localStorage.setItem(STORAGE_KEYS.THEME, theme);
};

export const getTheme = (): 'light' | 'dark' => {
  return (localStorage.getItem(STORAGE_KEYS.THEME) as 'light' | 'dark') || 'light';
};

// Utility functions
export const generateId = (): string => {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

export const generateJWT = (user: User): string => {
  // In a real app, this would be generated by the backend with proper signing
  return btoa(JSON.stringify({ 
    userId: user.id, 
    email: user.email,
    exp: Date.now() + 24 * 60 * 60 * 1000 
  }));
};

// Check if user exists by email
export const userExistsByEmail = (email: string): boolean => {
  const users = getAllUsers();
  return users.some(user => user.email === email);
};

// Check if username is taken
export const usernameExists = (username: string): boolean => {
  const users = getAllUsers();
  return users.some(user => user.username === username);
};